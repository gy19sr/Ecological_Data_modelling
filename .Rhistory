referendum_data <- read_csv("https://www.electoralcommission.org.uk/sites/default/files/2019-07/EU-referendum-result-data.csv")
library(tidyverse)
library(sf)
library(tmap)
referendum_data <- read_csv("https://www.electoralcommission.org.uk/sites/default/files/2019-07/EU-referendum-result-data.csv")
region_summary <- referendum_data %>%
group_by(Region) %>%
summarise(share_leave=sum(Leave)/sum(Valid_Votes)) %>%
arrange(desc(share_leave))
print(region_summary)
referendum_data <- referendum_data %>%
mutate(share_leave=Leave/Valid_Votes,
margin_leave=share_leave-0.5 )
referendum_data %>%
filter(Area!="Gibraltar") %>%
ggplot(aes(x=reorder(Area,-share_leave), y=margin_leave, fill=margin_leave))+
geom_bar(stat="identity", width=1)+
scale_fill_distiller(palette = 5, type="div", direction=1, guide="colourbar", limits=c(-0.3,0.3))+
scale_x_discrete(breaks=c("Lambeth","Slough","Boston")) +
geom_hline(aes(yintercept=0))+
theme_classic()+
xlab("LAs by Leave (asc)")+
ylab("Margin Leave/Remain")
setwd("C:/Users/stuar/OneDrive/Documents/onlinecourses/Ecology/Ecological_Data_modelling")
save.image("C:/Users/stuar/OneDrive/Documents/onlinecourses/Ecology/Ecological_Data_modelling/workspace_ecology.RData")
modelLookup("knn")
library(caret)
modelLookup("knn")
load("ch7.RData")
load("ch7.RData")
load("ch7.RData")
load("ch7.RData")
setwd("C:/Users/stuar/OneDrive/Documents/onlinecourses/Deeplearning/Machine_learning_K_nearest_neighbor")
load("ch7.RData")
setwd("C:/Users/stuar/OneDrive/Documents/onlinecourses/Ecology/Ecological_Data_modelling")
rm(list = ls()) #clear work space
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(sparkline)
trees <- read.csv(file = "trees.csv", header = TRUE)
rm(list = ls()) #clear work space
head(trees)
str(trees)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
source('C:/Users/stuar/OneDrive/Documents/onlinecourses/Ecology/Ecological_Data_modelling/script.R', echo=TRUE)
head(trees)
str(trees)
View(trees)
# create an internal grouping structure, so that the next function acts on groups
# (here, species) separately.
trees.grouped <- group_by(trees, CommonName)
# here we use length to count the number of rows (trees) for each group (species).
trees.summary <- summarise(trees.grouped, count = length(CommonName))
trees.summary
trees.grouped
View(trees.grouped)
View(trees.grouped)
#--- Alternatively----, dplyr has a tally function  does the counts
trees.summary <- tally(trees.grouped)
# Count the number of trees for each species, with a pipe!
trees.summary <- trees %>%                   # the data frame object that will be passed in the pipe
group_by(CommonName) %>%    # don't need to name the object, just the grouping variable
tally()
#Script
rm(list = ls()) #clear work space
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(sparkline)
#dplyr::filter() -- as there are conflicts
#setwd("")
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
str(trees)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
str(trees)
# Count the number of trees for each species
# create an internal grouping structure, so that the next function acts on groups
# (here, species) separately.
trees.grouped <- group_by(trees, CommonName)
# here we use length to count the number of rows (trees) for each group (species).
#trees.summary <- summarise(trees.grouped, count = length(CommonName))
#--- Alternatively----, dplyr has a tally function  does the counts
trees.summary <- tally(trees.grouped)
##--- now dplyr method ---
# Count the number of trees for each species, with a pipe!
trees.summary <- trees %>%                   # the data frame object that will be passed in the pipe
group_by(CommonName) %>%    # don't need to name the object, just the grouping variable
tally()
# ctrl shift M for %>%
trees.subset <- trees %>%
filter(CommonName %in% c('Common Ash', 'Rowan', 'Scots Pine')) %>% #three species
group_by(CommonName, AgeGroup) %>% #age group and
tally() #count of each type
print(trees.subset)
#summary dataframe
summ.all <- summarise_all(trees, mean)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
str(trees)
trees.grouped <- group_by(trees, CommonName)
trees.summary <- tally(trees.grouped)
# Count the number of trees for each species, with a pipe!
trees.summary <- trees %>%                   # the data frame object that will be passed in the pipe
group_by(CommonName) %>%    # don't need to name the object, just the grouping variable
tally()
trees.subset <- trees %>%
filter(CommonName %in% c('Common Ash', 'Rowan', 'Scots Pine')) %>% #three species
group_by(CommonName, AgeGroup) %>% #age group and
tally() #count of each type
print(trees.subset)
summ.all <- summarise_all(trees, mean)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
print(trees.subset)
